unit RpServer.Model.Dao.Generic;

interface

uses
  System.JSON,
  REST.Json,
  SimpleInterface,
  SimpleDAO,
  SimpleAttributes,
  SimpleQueryFiredac,
  Data.DB,
  DataSetConverter4D,
  DataSetConverter4D.Impl,
  DataSetConverter4D.Helper,
  DataSetConverter4D.Util,
  RpServer.Model.Connection;

type
  iDAOGeneric<T : Class> = interface
    ['{B4D48166-7EAA-47F8-849F-7430FF65F364}']
    function Find : TJSONObject; overload;
    function Find (const aID : String ) : TJsonObject; overload;
    function Insert (const aJsonObject : TJsonObject) : TJsonObject;
    function Update (const aJsonObject : TJsonObject) : Boolean;
    function Delete (const aID : String) : Boolean;
    function RecordCount : Integer;
    function DataSetAsJsonArray : TJsonArray;
    function DataSetAsJsonObject : TJsonObject;
    function DAO : ISimpleDAO<T>;
  end;

  TDAOGeneric<T : class, constructor> = class(TInterfacedObject, iDAOGeneric<T>)
  private
    FIndexConn : Integer;
    FConn : iSimpleQuery;
    FDAO : iSimpleDAO<T>;
    FDataSource : TDataSource;
  public
    constructor Create;
    destructor Destroy; override;
    class function New : iDAOGeneric<T>;

    function Find : TJSONObject; overload;
    function Find (const aID : String ) : TJsonObject; overload;
    function Insert (const aJsonObject : TJsonObject) : TJsonObject;
    function Update (const aJsonObject : TJsonObject) : Boolean;
    function Delete (const aID : String) : Boolean;
    function RecordCount : Integer;
    function DataSetAsJsonArray : TJsonArray;
    function DataSetAsJsonObject : TJsonObject;
    function DAO : ISimpleDAO<T>;
  end;

implementation

uses
  System.SysUtils;

{ TDAOGeneric<T> }

constructor TDAOGeneric<T>.Create;
begin
  FDataSource := TDataSource.Create(nil);
  FIndexConn :=RpServer.Model.Connection.Connected;
  FConn := TSimpleQueryFiredac.New(RpServer.Model.Connection.FConnList.Items[FIndexConn]);
  FDAO := TSimpleDAO<T>.New(FConn).DataSource(FDataSource);
end;

function TDAOGeneric<T>.DAO: ISimpleDAO<T>;
begin
  Result := FDAO;
end;

function TDAOGeneric<T>.DataSetAsJsonArray: TJsonArray;
begin
  Result := FDataSource.DataSet.AsJSONArray;
end;

function TDAOGeneric<T>.DataSetAsJsonObject: TJsonObject;
begin
  Result := FDataSource.DataSet.AsJSONObject;
end;

function TDAOGeneric<T>.Delete(const aID: String): Boolean;
var
  LJson : TJSONObject;
  zT : T;
begin
  Result := False;
  zT := FDAO.Find(StrToInt(aID));

  if FDataSource.DataSet.RecordCount > 0 then begin
    FDAO.Delete(zT);
    Result := True;
  end;
end;

destructor TDAOGeneric<T>.Destroy;
begin
  FDataSource.Free;
  RpServer.Model.Connection.Disconnected(FIndexConn);
  inherited;
end;

function TDAOGeneric<T>.Find: TJSONObject;
var
  LJson : TJSONObject;
begin
  FDAO.Find;
  LJson := TJSONObject.Create;
  LJson.AddPair('data', FDataSource.DataSet.AsJSONArray);
  LJson.AddPair('records', TJSONNumber.Create(RecordCount));
  Result := LJson;
end;

function TDAOGeneric<T>.Find(const aID: String): TJsonObject;
begin
  FDAO.Find(StrToInt(aID));
  Result := FDataSource.DataSet.AsJSONObject;
end;

function TDAOGeneric<T>.Insert(const aJsonObject: TJsonObject): TJsonObject;
begin
  FDAO.Insert(TJson.JsonToObject<T>(aJsonObject));
  FDAO
    .SQL
      .OrderBy('id desc limit 1')
    .&End
  .Find;

  Result := FDataSource.DataSet.AsJSONObject;
end;

class function TDAOGeneric<T>.New: iDAOGeneric<T>;
begin
  Result := Self.Create;
end;

function TDAOGeneric<T>.RecordCount: Integer;
begin
  Result := FDataSource.DataSet.RecordCount;
end;

function TDAOGeneric<T>.Update(const aJsonObject: TJsonObject): Boolean;
begin
  var zId := 0;

  Result := False;

  aJsonObject.TryGetValue<Integer>('id', zId);
  FDAO.Find(zId);

  if RecordCount > 0 then begin
    FDAO.Update(TJson.JsonToObject<T>(aJsonObject));
    Result := True;
  end;
end;

end.
